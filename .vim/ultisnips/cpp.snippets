snippet start
#include<bits/stdc++.h>
#define ll long long
#define ar array
using namespace std;

int main() {
    $1
    return 0;
}
endsnippet

snippet vi
vector<int> v;
$0
endsnippet

snippet bs
int binarySearch(int arr[], int l, int r, int x) {
    while (l <= r) {
        int m = l + (r - l) / 2;
        if (arr[m] == x)
            return m;
        if (arr[m] < x)
            l = m + 1;
        else
            r = m - 1;
    }
    return -1;
}
endsnippet

snippet gcd
int gcd(int a, int b) {
    return b == 0 ? a : gcd(b, a % b);
}
endsnippet

snippet fast_pow
ll fast_pow(ll base, ll power, ll mod) {
    ll result = 1;
    while(power > 0) {
        if(power & 1 == 1) {
            result = (result * base) % mod;
        }
        base = (base * base) % mod;
        power = power >>= 1;
    }
    return result;
}
endsnippet

snippet cend
cout << $1 << endl;
$0
endsnippet

snippet arrn
int n, arr[$1];
cin >> n;
for (int i = 0; i < n; ++i) cin >> arr[i];
$0
endsnippet

snippet argsort
template<typename T>
std::vector<size_t> argsort(const std::vector<T> &array) {
    std::vector<size_t> indices(array.size());
    std::iota(indices.begin(), indices.end(), 0);
    std::sort(indices.begin(), indices.end(),
              [&array](int left, int right) -> bool {
                  return array[left] < array[right];
              });

    return indices;
}
endsnippet

snippet lower_bound
template <class T>
T lower_bound(T (*gen)(T), T l, T r, T key) {
    T mid, value;
    while (l < r) {
        mid = l + (r - l) / 2;
        value = gen(mid);

        if (value < key)
            l = mid + 1;
        else
            r = mid;
    }
    if (gen(r) >= key) return r;
    return r + 1;
}
endsnippet

snippet upper_bound
template <class T>
T upper_bound(T (*gen)(T), T l, T r, T key) {
    T mid, value;
    while (l < r) {
        mid = l + (r - l) / 2;
        value = gen(mid);

        if (value <= key)
            l = mid + 1;
        else
            r = mid;
    }
    if (gen(l) > key) return l;
    return l + 1;
}
endsnippet
